"""
Parses some metafiles into .py and .hh files
"""

import argparse
import copy
import ctypes
import json
import os
import sys

machine_generated_warning = "<-------- This File was Machine Generated by %s, DO NOT MODIFY! -------->\n\n" % (__file__)

def reversedict(adict):
    newdict = {}
    for key, val in adict.iteritems():
        newdict[val] = key
    return newdict 

def parse_enum_python(filepath, enum_data):
    pyfilepath = "%s.py" % (filepath)
    with open(pyfilepath, 'w') as f:
        f.write("%s%s" % ("#", machine_generated_warning))
        for group in enum_data:
            f.write("%s = %r\n" % (group , enum_data[group] ))
        f.write("%s = %r" % ('error_to_string', reversedict(enum_data['error'])))

def make_google_compliant(string):
    string = string.title()
    string = string.replace('_', '')
    return string

def parse_enum_c(filepath, enum_data, namespace):
    cfilepath = "%s.hh" % (filepath)
    stringifypath = "%s_stringify.cc" % (filepath)
    namespace_top = "namespace " + namespace + " {\n"
    stringify_error_top = "std::string StringifyError(Error error){\n"
    stringify_error_bottom = "}\n"
    namespace_bottom = "}"
    c_define_top = "#ifndef %s_HH\n#define %s_HH\n#ifndef BRONX\n#include <string>\n#endif\n" % (filepath.upper(), filepath.upper())
    c_define_bottom = "#endif // %s_HH" % (filepath.upper())
    stringify_file_top = "#ifndef BRONX\n#include <string>\n#include <sstream>\n#include \"" + cfilepath + "\" \n"
    stringify_file_bottom = "#endif"
    with open(stringifypath, 'w') as f:
        f.write(stringify_file_top)
        for group in enum_data:
            c_codes = {}
            for key in enum_data[group]:
                c_codes["k%s" % (key)] = enum_data[group][key]
            stringify_top = "std::string %s::stringify_%s(%s val) {\n\tstd::stringstream retval;\n\tswitch(val){\n" \
                 % (make_google_compliant(group), make_google_compliant(group), namespace)
            stringify_middle = ""
            for key, value in enum_data[group].iteritems():
                stringify_middle += "\tcase %i:\n\t\tretval << \"%s::k%s\";\n\t\tbreak;\n" \
                     % (value,namespace,str(make_google_compliant(key)))
            stringify_bottom = "\tdefault:\n\t\tretval << \"%s::Unknown or not implemented\";\n\t}\n\treturn retval.str();\n}" % (namespace)
            for part in [ stringify_top, stringify_middle, stringify_bottom]:
                f.write("%s\n" % (part))
        f.write(stringify_file_bottom)

    with open(cfilepath, 'w') as f:
        for part in [c_define_top, namespace_top]:
            f.write("%s\n" % (part))

        for group in enum_data:
            c_codes = {}
            for key in enum_data[group]:
                c_codes["k%s" % (key)] = enum_data[group][key]
            stringify_prototype = "#ifndef BRONX\nstd::string stringify_%s(%s val);\n#endif\n" % (make_google_compliant(group), make_google_compliant(group))
            declaration_top = "enum %s {" % (make_google_compliant(group))
            declaration_middle = ""
            for key, value in enum_data[group].iteritems():
                declaration_middle += "\tk%s = %i,\n" % (make_google_compliant(key), value)
            declaration_bottom = "};\n"
            for part in [ declaration_top, declaration_middle, declaration_bottom,stringify_prototype]:
                f.write("%s\n" % (part))

        for part in [ namespace_bottom, c_define_bottom]:
            f.write("%s\n" % (part))

