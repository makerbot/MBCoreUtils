// This file is automatically generated -- do not edit it!

#ifndef KAITENSTUB_HH_
#define KAITENSTUB_HH_

#include <memory>
#include <string>
#include <boost/optional.hpp>
#include <boost/log/trivial.hpp>
#include <jsoncpp/json/value.h>
#include <jsonrpc/jsonrpccallback.h>
#include "ikrpccontroller.hh"

namespace krpc {
class KaitenStub {
 public:
  KaitenStub(Controller* controller)
    : m_controller(controller) {}
{{#kaiten_api}}
  void {{{fn_name}}}({{#parameters}}{{#optional}}boost::optional<{{/optional}}const {{{type}}}{{#optional}}>{{/optional}} {{{name}}}{{#optional}}=boost::none{{/optional}},{{/parameters}}const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
{{#parameters}}{{#optional}}    if ({{{name}}} != boost::none)
    {{/optional}}  rpc_params["{{{name}}}"] = {{{name}}}{{#optional}}.get(){{/optional}};
{{/parameters}}
    m_controller->invoke("{{{fn_name}}}", rpc_params, callback);
  }

{{#optional_params}}
  void {{{fn_name}}}({{#parameters}}{{^optional}}const {{{type}}} {{{name}}},{{/optional}}{{/parameters}}const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for {{{fn_name}}}";
    {{{fn_name}}}({{#parameters}}{{^optional}}{{{name}}}{{/optional}}{{#optional}}boost::none{{/optional}},{{/parameters}}callback);
  }{{/optional_params}}

{{/kaiten_api}}

 private:
  Controller* m_controller;

  class noCB : public JsonRpcCallback {
   public:
    void response(const Json::Value& r) { (void)r; };
  };
};
}  // namespace krpc
#endif  // KAITENSTUB_HH_
