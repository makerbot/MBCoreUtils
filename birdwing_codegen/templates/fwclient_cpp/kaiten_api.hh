// This file is automatically generated -- do not edit it!

#ifndef CLIENT_KAITEN_API_HH_
#define CLIENT_KAITEN_API_HH_

#include "client/printerpanelcontroller.hh"
#include "client/guirpccallback.hh"
#include <boost/optional.hpp>
#include <jsoncpp/json/value.h>
#include <memory>
#include <string>

// This header exposes functions for calling top-level kaiten API functions.
// examples:
// print(std::string filepath, bool ensure_build_plate_clear, std::shared_ptr<JsonRpcCallback> callback)
// print(print::args(filepath).cb(callback))
// TODO(jacksonh): document interface

namespace PrinterPanel {
namespace rpc {
{{#kaiten_api}}
class {{{fn_name}}} {
 public:
    class args {
        friend class {{{fn_name}}};
     public:
        args({{#parameters}}{{#optional}}boost::optional<{{/optional}}const {{{type}}}{{#optional}}>{{/optional}} {{{name}}}{{#optional}}=boost::none{{/optional}},{{/parameters}}std::shared_ptr<JsonRpcCallback> cb = std::make_shared<NoCallback>()) {
{{#parameters}}              m_{{{name}}} = {{{name}}};
{{/parameters}}              m_callback = cb;
        }
{{#parameters}}
        args& {{{name}}}(const {{{type}}} val) {
            m_{{{name}}} = val;
            return *this;
        }
{{/parameters}}
        args& cb(std::shared_ptr<JsonRpcCallback> cb) {
            m_callback = cb;
            return *this;
        }
     private:
        {{#parameters}}
        {{#optional}}boost::optional<{{/optional}}{{{type}}}{{#optional}}>{{/optional}} m_{{{name}}};
        {{/parameters}}
        std::shared_ptr<JsonRpcCallback> m_callback;
    };

    {{{fn_name}}}({{#parameters}}const {{#optional}}boost::optional<{{/optional}}{{{type}}}{{#optional}}>{{/optional}} {{{name}}}{{#optional}}=boost::none{{/optional}},{{/parameters}}const std::shared_ptr<JsonRpcCallback>& cb = std::make_shared<NoCallback>()) {
      Json::Value rpc_params;
{{#parameters}}{{#optional}}      if ({{{name}}} != boost::none)
      {{/optional}}  rpc_params["{{{name}}}"] = {{{name}}}{{#optional}}.get(){{/optional}};
{{/parameters}}
      PrinterPanelController::instance()->rpcCall("{{{fn_name}}}", rpc_params, cb);
    }

    {{{fn_name}}}(const args& p) : {{{fn_name}}}({{#parameters}}p.m_{{{name}}},{{/parameters}}p.m_callback) {}
};

{{/kaiten_api}}
}  // namespace rpc
}  // namespace PrinterPanel

#endif  // CLIENT_KAITEN_API_HH_
